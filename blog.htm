<!DOCTYPE HTML>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Chris Ho</title>
    <link rel="stylesheet" type="text/css" href="stylesheet.css"/>
    <link rel="shortcut icon" type="image/x-icon" href="favicon.ico" />
  </head>
  <body>
    <header>
      <h1>Chris Ho</h1>
    </header>
    <nav role = "navigation">
      <ul>
        <div class="navbar">
          <li><a id="nav" href="index.html" title="Home">Home</a></li>
          <li><a id="nav" href="blog.htm" title="Blog">Blog</a></li>
          <li><a id="nav" href="Christopher_Ho_Resume.pdf" title="Resume" target="_blank">Resume</a></li>
        </div>
      </ul>
    </nav>
    <main role = "main">
      <article>
        <h2>Welcome to my blog!</h2>
        <section class="blogEntry">
          <h3>Oops</h3>
          <br>
          <h4>Tuesday, June 5 2018</h4>
          <p>So, I just realized that I have been building this app with only one device size in mind... That is problematic for very obvious reasons, so now I need to change up all of the XML I have written so far and use a linear layout instead of a relative one. A relative layout would work well for apps that you would have a lot of text and scrolling around, because it would allow you to take advantage of the larger screens while presenting less information to smaller screens. However, for what I want to do for now, I just want one clean looking home screen, and then for hourly or incremental weather I could use a relative layout to organize the forecast. However, I do need to change the home page to a linear layout where I can choose exactly what proportions I want for each block of information. I tried to do this with a relative layout at first, but I found no success in this :(.</p>
          <p>Good news for today is that I found a really nice library to plot the forecasts, called hellocharts. It's free to use and from testing it briefly, it should be able to do everything I need it to. Unfortunately, I originally used a different library but found out that it didn't have all the functionality I wanted it to have until I already had it working.</p>
        </section>
        <br>
        <section class="blogEntry">
          <h3>Finally got something kind of working</h3>
          <br>
          <h4>Monday, June 4 2018</h4>
          <p>I haven't updated my blog in a while because lately I've been pretty busy. But, in the past 6 days I've tried many things and I finally have something to show. Right now the interface is extremely simple, but I have a "working" weather app. I'll include a screenshot here: <a href="first_build.png" title="first build"> first build</a>. At first, I wanted to try to use only built-in Java functions for parsing from the DarkSky API, and I created a function that broke the information down fairly well. However, I found that it would be much more time efficient and my code would be more readable if I imported the JSONObject library into my project to handle the parsing. Then, I learned about some very basic functions for android app development, AsyncTask and AsyncResponse, which actually call the functions needed to fetch data from the API. My main Java class is then very simple, as it basically just calls a WeatherResponse class that I put the AsyncTask and response functions in.</p>
          <p>After calling the API, I have to actually display the information. Android uses XML to for formatting, similar to how web design uses CSS. I chose to display the information in a "relative layout" where each block of text is placed relative to another. This is easiest way that I could find do accomplish the task, and for the little information that I have currently, it works very well.</p>
          <p>Having figured out the basics of how creating an app and displaying information works, I think that my app will progress much faster in the coming days. I plan to put much more information into the app and have multiple pages, because the whole point of using this API is to get minutely forecasts. If I just wanted an overview of one day, many other APIs would work better than this one. I have to figure out how to do some sort of navigation, and I will also need to be able to scroll through the page, because there is no way that I'll fit 60 minutely weather forecasts on a phone screen.</p>
        </section>
        <br>
        <section class="blogEntry">
          <h3>Beginning app development</h3>
          <br>
          <h4>Tuesday, May 30 2018</h4>
          <p>So, I decided to make a weather app. There's this one API called DarkSky that gives you ultra-local weather predictions, and it seems simple enough to use. I think a weather app is a pretty good use of time because it will teach me some backend with API calls and parsing data, and then I'll hopefully have a dynamic front end to show a weather graph or something of the sort. So far I can call the API, which is not as simple as python GET requests. Today I will figure out how to parse the data in a way that is usable, and then I'll try to get it to display on the app screen. I definitely don't understand the Android Studio app well, because I'm using eclipse to test out my code and then copying it to Android Studio... So far it works and doesn't take much extra time, so I think I'll keep going like this at least for a little while. When using URL and HttpURLConnection, java might throw a MalformedURLException or an IOException. From some examples of HTTP requests I saw, I did not have to handle these, as I thought they would be handled in some default manner. However, I had to explicitly use try and catch clauses in case one of these two exceptions came up, which slowed down my work. I was confused because the exceptions weren't being thrown, but I still had to handle them in case they were for my code to run.</p>
        </section>
        <br>
        <section class="blogEntry">
          <h3>A few more data structures and maybe some Java</h3>
          <br>
          <h4>Saturday, May 26 2018</h4>
          <p>Today I did a lot of similar stuff as yesterday, just going through the book and reading up on some data structures and how to use them. But, I think with the couple weeks I have until I start working, I'll have just enough time to make a pretty simple Android app. This could be helpful for job fairs just to show off that I'm doing something because who knows if anyone wants to look at a website :(. One thing I noticed is that there aren't any weather apps that I really like, so maybe that's what I'll do. It would teach me API calling and Java is a pretty versatile language so it wouldn't hurt to learn it. I do wish I could work with Python, but Android obviously runs on Java. Maybe I could make a web app with python? Not too sure what I should do right now, but I need something that I can show people immediately.</p>
        </section>
        <br>
        <section class='blogEntry'>
          <h3>Beginning python data structures</h3>
          <br>
          <h4>Friday, May 25 2018</h4>
          <p>The website is the same as yesterday, and I don't plan on working on it anymore until I figure out a way to make the home page more visually pleasant. However, I did upload it to GitHub pages, so you can find it here, at <a href="https://cdho2.github.io" title="https://cdho2.github.io">https://cdho2.github.io</a>. That was really simple, but it took me a little while because I didn't realize I needed to have a description in order to make my first commit, and I also thought that GitHub Pages wasn't working, but it turns out it just takes a short while for the site to go live. Also, I decided it makes more sense to invert the order, so now the site will have the most recent post on top. Sometime I will have to figure out multiple pages for the blog as well for obvious reasons.</p>
          <p>With the site out of the way now, I am just planning to go through <i>Python Cookbook</i> and learn as much about python as I can. Now that I am refreshed on python syntax, I am learning about python built in data structures, and some of the nifty tricks you can do with all of the built in modules and functions within it. Prior to today, I didn't even know what a deque was. It's actually pronounced "deck" not de-queue like I first read it as. Whoops. A deque from my understanding is pretty much a stack that you can operate on from both sides, and if you want it will only retain a history of N most recent items. Python has really convenient ways to unpack tuples into collections of variables that only require a couple lines of code to run. I feel like this unpacking functionality would be great for web scraping or pretty much any type of parsing for long lists of items. Instead of just the simple max and min functions I knew about, python also has "nlargest" and "nsmallest" functions in their heapq module. Heapq is python's native implementation of a priority queue, or heap queue as the name implies. Even though priority queues are a good way to find the N largest or smallest elements, if N approaches the size of the collection, it is going to be faster to just sort the collection and then find the first or last N elements. Python's native sorting uses a type of sorting called Timsort, developed by Tim Peters. This algorithm implements elements from insertion and merge sort. It has a run time of n log n.</p>
        </section>
        <br>
        <section class="blogEntry">
          <h3>A little more CSS and <i>Python Cookbook, 3rd Edition</i></h3>
          <br>
          <h4>Thursday, May 24 2018</h4>
          <p>So today I didn't do too much to the website. I just made the links appear in bearable colors, and now when you hover over the links at the top, the colors become inverted from the normal color scheme. The layout of the site hasn't changed, and I still have to figure out what to do to the home page. But, that is something I'll have to leave for another day because I can't think of a good solution. I might also reverse the order of the blog so that it's the most recent on top. Here's what the blog looks like at the end of <a href="day3.PNG" title="day three design">day three</a>. Since I am pretty much done with the site editing, I think that tomorrow I'll find a free way to host this site. I've heard about heroku, but I have no idea how it works.</p>
          <p>I decided to learn a little bit about python, because that seems to be the language that everyone is doing data mining and machine learning with. Also, last year at iCAIR I worked with a little bit of Python, so it can't hurt to get a better understanding of it. <i>Python Cookbook</i> seems to be one of the highest recommended books for learning python, so I decided to try to read it. So far, it assumes that I know more than I do know, so I may have to switch to a more beginner friendly python book, but I'll try to get through some more of this one first. It starts off with some simple data structure information, so each section I read, I also test out the functions that the book goes over by making small and simple python files that I can run quickly.</p>
        </section>
        <br>
        <section class="blogEntry">
          <h3>Some Basic CSS</h3>
          <br>
          <h4>Wednesday, May 23 2018</h4>
          <p>Today is all about making the site look a little better. My plans currently are: Sliding side bar navigation, some sort of outline for each blog post "section", and making the site look nicer in general. The sliding sidebar may have been too ambitious of an undertaking given that it has to be done in JavaScript, so I'll move the navigation to the top for now. I am pretty happy with how the top navigation bar looks for now, because I think this is about as good as I can get it without knowing any JavaScript and not being experienced with design.</p>
          <p>I also added a favicon, which is a small touch but a nice one in my opinion</p>
        </section>
        <br>
        <section class="blogEntry">
          <h3>HTML Shenanigans and Starting Site Design</h3>
          <br>
          <h4>Tuesday, May 22 2018</h4>
          <p>Today I accepted a generous offer to work at Northwestern University for the summer. Working there last summer, I would be continuing what I did previously, but this time I want to be more software focused instead of networking. Since iCAIR is completely focused on networking, I am not quite sure how this is going to work, but for now I just want to get a site up and running that looks decent. Obviously it doesn't right now because it is literally just HTML. As of now, I'm still learning about the sectioning elements of HTML, such as "section", "aside", "div", and "article". WAI ARIA roles are used to make sites more accessible by using more specific "roles" than just the HTML5 tags. They allow more verbose scanning for anything parsing your site! These roles are way too many to remember, so they can be found on the following site: <a href="https://www.w3.org/TR/html-aria/#docconformance/" title="Wai-Aria roles table" target="_blank">Wai-aria roles table</a>. Likewise, here is a link to a reference table for <a href="https://www.w3schools.com/Tags/default.asp" title="tag reference" target="_blank">HTML tags.</a> Just for good measure, here's another reference on general <a href="HTML_syntax.pdf" title="HTML syntax reference" target="_blank">HTML syntax</a>.</p>
          <p>Today is also the first day of starting work on my website. Originally I planned to try to start learning some CSS before making the site, but why not just start figuring out the structure? Oh boy, here it goes.</p>
          <p>Here is what my site looked like at the end of <a href="day1.PNG" title="Day One Site">day one</a>.
        </section>
      </article>
    </main>
    <footer>
      <p class="contactInfo"><span id="contactInfo">Contact me via email: <a id="emailLink" href="mailto:ho.chris4@gmail.com" title="email address">ho.chris4@gmail.com</a>.</span></p>
    </footer>
  </body>
</html>